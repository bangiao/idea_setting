<application>
  <component name="AppStorage">
    <histories>
      <item value="remove Manual Singleton Name" />
      <item value="Cannot modify startup-time collection elements anymore (for stable iteration)" />
      <item value="e.g. was ROLE_APPLICATION, now overriding with ROLE_SUPPORT or ROLE_INFRASTRUCTURE" />
      <item value="is Allow Bean Definition Overriding" />
      <item value="apply Scoped Proxy Mode" />
      <item value="get Dependency Comparator" />
      <item value="Annotation Aware Order Comparator" />
      <item value="set Dependency Comparator" />
      <item value="Context Annotation Autowire Candidate Resolver" />
      <item value="Persistence Annotation Bean Post Processor" />
      <item value="Check for JSR-250 support, and if present add the CommonAnnotationBeanPostProcessor." />
      <item value="Common Annotation Bean Post Processor" />
      <item value="CONFIGURATION ANNOTATION PROCESSOR BEAN NAME" />
      <item value="unwrap Default Listable Bean Factory" />
      <item value="relevant" />
      <item value="get Or Create Environment" />
      <item value="preempting" />
      <item value="Detected both log4j-over-slf4j.jar AND bound slf4j-log4j12.jar on the class path, preempting StackOverflowError" />
      <item value="Container annotation that aggregates several PropertySource annotations.&#10;Can be used natively, declaring several nested PropertySource annotations. Can also be used in conjunction with Java 8's support for repeatable annotations, where PropertySource can simply be declared several times on the same type, implicitly generating this container annotation." />
      <item value="get Authentication" />
      <item value="get Principal" />
      <item value="dot To Back Slash" />
      <item value="init With Niws Config" />
      <item value="Translet Class Loader" />
      <item value="clean Some Slots" />
      <item value="do Privileged" />
      <item value="Ensures that loads before the fence will not be reordered with loads and stores after the fence; a &quot;LoadLoad plus LoadStore barrier&quot;. Corresponds to C11 atomic_thread_fence(memory_order_acquire) (an &quot;acquire fence&quot;). A pure LoadLoad fence is not provided, since the addition of LoadStore is almost always desired, and most current hardware instructions that provide a LoadLoad barrier also provide a LoadStore barrier for free." />
      <item value="load Fence" />
      <item value="expect" />
      <item value="希望" />
      <item value="was Uncontended" />
      <item value="collide" />
      <item value="Spinlock (locked via CAS) used when resizing and/or creating Cells." />
      <item value="True if last slot nonempty" />
      <item value="acquire Queued" />
      <item value="PROPAGATE" />
      <item value="has Queued Predecessors" />
      <item value="try Acquire" />
      <item value="The thread that enqueued this node. Initialized on * construction and nulled out after use." />
      <item value="exclusive Owner Thread" />
      <item value="get All Insert Sql Column Maybe If" />
      <item value="Injector" />
      <item value="Repeatable" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="46" />
        <entry key="ENGLISH" value="47" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1613647685078" />
  </component>
</application>